
"""
Generate test fixtures for the MISER algorithm.

The test fixtures are generated by running many trial 
integrations and saving the mean error and standard
deviation to a pickle file. These can then be tested
for regressions.

To add a function to be tested, add the function to
miser_fixture.miser_functions, and build the fixture 
in the fixtures list here. Run this script. Next time the 
unittests are run, test_miser will automatically check this 
function.
"""

from __future__ import print_function
import pickle

import miser_fixture


DATA_FILE = "miser_data.pkl"

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(
            description="Generate results for MISER tests.")

    parser.add_argument("-q","--quiet",action="store_true",
            default=False,
            help="Suppress output.")

    parser.add_argument("--only",metavar="X",nargs="+",type=int,
            help="Only run these fixtures.")

    parser.add_argument("--no-save",action="store_true",
            help="Don't save results.")

    args = parser.parse_args()

    VERBOSE = not args.quiet
    
    fixtures = [
            miser_fixture.TestRun("x**2", 1e4, 500, [0.],[1.], 1./3.),
            miser_fixture.TestRun("x**2", 1e4, 500, [-10.],[3.],1027./3.),
            miser_fixture.TestRun("x**2 (sum)", 1e4, 500, [0.]*2,[1.]*2,2./3.),
            miser_fixture.TestRun("x**2 (sum)", 1e4, 500, [0.]*6,[1.]*6,2.),
            miser_fixture.TestRun("prod", 1e4, 500, [0.],[1.],0.5),
            miser_fixture.TestRun("prod", 1e4, 500, [0.]*6,[1.]*6,0.5**6),
            miser_fixture.TestRun("x**2+3*y**2",1e4,500,[0.,0.],[1.,1.],4./3.)
    ]

    # If args.only is specified, try loading from data file.
    if args.only is not None:
        try:
            with open(DATA_FILE) as f:
                saved_fixtures = pickle.load(f)
        except IOError:
            print("Failed to load data file: {}".format(DATA_FILE))

    # Prepare the fixtures.
    for ifixture, fixture in enumerate(fixtures):
        if args.only is not None and ifixture not in args.only:
            fixtures[ifixture] = saved_fixtures[ifixture]
            continue
        if VERBOSE:
            msg = "({}) {}".format(ifixture,fixture.fcode)
            print(msg)
            print("="*len(msg))
        fixture.check_results_errors(VERBOSE)
        fixture.check_trial_run()
        if VERBOSE: print()

    # Save the fixtures.
    if not args.no_save:
        with open(DATA_FILE,"w") as f:
            pickle.dump(fixtures,f)
            if VERBOSE: print("Data pickled in {}.".format(DATA_FILE))
    


